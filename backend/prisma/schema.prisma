// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  INSTRUCTOR
}

/**
 * Basic user model with roles
 */
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String
  password  String
  role      Role      @default(STUDENT)

  // Relations
  courses   Course[]  @relation("InstructorCourses")
  orders    Order[]
  subscription Subscription?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

/**
 * Course created by an instructor
 */
model Course {
  id             String    @id @default(uuid())
  title          String
  description    String
  price          Float
  isSubscriptionOnly Boolean @default(false)

  // Owner / Instructor
  instructor     User      @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId   String

  lessons        Lesson[]
  orders         Order[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

/**
 * Lesson in a course (video or text content)
 */
model Lesson {
  id        String   @id @default(uuid())
  title     String
  videoUrl  String?
  content   String?

  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * One-time purchase of a course
 */
model Order {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String

  amount    Float
  status    String   // “PAID”, “REFUNDED”, etc.

  createdAt DateTime @default(now())
}

/**
 * Active subscription record
 */
model Subscription {
  id                   String   @id @default(uuid())
  user                 User     @relation(fields: [userId], references: [id])
  userId               String   @unique

  stripeSubscriptionId String   @unique
  status               String
  currentPeriodEnd     DateTime

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}